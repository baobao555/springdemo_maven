<?xml version="1.0" encoding="UTF-8"?>
<!--Spring容器的配置文件-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

<!--    bean标签
作用： 用于配置对象让spring来创建的。 默认情况下它调用的是类中的无参构造函数。
       如果没有无参构造函数则不能创建成功。
属性：
id：给对象在容器中提供一个唯一标识。用于获取对象。
class：指定类的全限定类名。用于反射创建对象。默认情况下调用无参构造函数。
scope：指定对象的作用范围。 * singleton :默认值，单例的.
                          * prototype :多例的.
                          * request :WEB项目中,Spring创建一个Bean的对象,将对象存入到request域中.
                          * session :WEB项目中,Spring创建一个Bean的对象,将对象存入到session域中.
                          * global session :WEB项目中,应用在Portlet环境.如果没有Portlet环境那么globalSession相当于session.
   单例对象：scope="singleton" 一个应用只有一个对象的实例。它的作用范围就是整个引用。
        生命周期： 对象出生：当应用加载，创建容器时，对象就被创建了。
                  对象活着：只要容器在，对象一直活着。
                  对象死亡：当应用卸载，销毁容器时，对象就被销毁了。
   多例对象：scope="prototype" 每次访问对象时，都会重新创建对象实例。
        生命周期： 对象出生：当使用对象时，创建新的对象实例。
                  对象活着：只要对象在使用中，就一直活着。
                  对象死亡：当对象长时间不用时，被java的垃圾回收器回收了。
init-method：指定类中的初始化方法名称。 destroy-method：指定类中销毁方法名称。-->

    <!--    配置Service-->
    <bean id="service" class="com.baobao.demo.service.ServiceImpl"/>

    <!--    配置Dao-->
    <bean id="dao" class="com.baobao.demo.dao.DaoImpl"/>


    <!-- DI方式一：使用构造函数的方式
    要求： 类中需要提供一个对应参数列表的构造函数。
    涉及的标签： constructor-arg
                属性： index:指定参数在构造函数参数列表的索引位置
                       type:指定参数在构造函数中的数据类型
                       name:指定参数在构造函数中的名称 用这个找给谁赋值
                       =======上面三个都是找给谁赋值，下面两个指的是赋什么值的==============
                       value:它能赋的值是基本数据类型和String类型
                       ref:它能赋的值是其他bean类型，也就是说，必须得是在配置文件中配置过的bean-->
    <bean id="person" class="com.baobao.demo.bean.Person">
        <constructor-arg name="name" value="baobao"/>
        <constructor-arg name="age" value="18"/>
        <constructor-arg name="birthday" ref="now"/>
    </bean>

    <bean id="now" class="java.util.Date"/>

    <!-- DI方式二：通过配置文件给bean中的属性传值：使用set方法的方式
    涉及的标签： property
                属性：
                name：找的是类中set方法后面的部分
                ref：给属性赋值是其他bean类型的
                value：给属性赋值是基本数据类型和string类型的
                实际开发中，此种方式用的较多。-->
    <bean id="person2" class="com.baobao.demo.bean.Person">
        <property name="name" value="baobao2"/>
        <property name="age" value="28"/>
        <property name="birthday" ref="now"/>
    </bean>

    <!-- DI方式三：使用p名称空间（本质还是调用set方法）
    此种方式是通过在xml中导入p名称空间，使用p:propertyName来注入数据，它的本质仍然是调用类中的set方法实现注入功能
    配置文件头部约束加入xmlns:p="http://www.springframework.org/schema/p"   -->

    <bean id="person3" class="com.baobao.demo.bean.Person"
      p:name="baobao3" p:age="38" p:birthday-ref="now"/>


    <!-- 注入集合数据
    List结构的： array,list,set
    Map结构的 map,entry,props,prop -->

    <bean id="list" class="com.baobao.demo.bean.ListBean">
        <!-- 在注入集合数据时，只要结构相同，标签可以互换 -->
        <!-- 给数组注入数据 -->
        <property name="array">
            <array>
                <value>111</value>
                <value>222</value>
                <value>333</value>
            </array>
        </property>
        <!-- 给list注入数据 -->
        <property name="list">
            <list>
                <value>aaa</value>
                <value>bbb</value>
                <value>ccc</value>
            </list>

        </property>
        <!-- 给set注入数据 -->
        <property name="set">
            <set>
                <value>aaa1</value>
                <value>bbb1</value>
                <value>ccc1</value>
            </set>
        </property>

        <!-- 给map注入数据 -->
        <property name="map">
            <map>
                <entry key="111" value="aaa"/>
                <entry key="222" value="bbb"/>
                <entry key="333" value="ccc"/>
            </map>
        </property>

        <!-- 给property注入数据 -->
        <property name="properties">
            <props>
                <prop key="aaa">111</prop>
                <prop key="bbb">222</prop>
                <prop key="ccc">333</prop>
            </props>
        </property>
    </bean>
</beans>